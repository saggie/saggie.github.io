<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1">
<style type="text/css">body { margin: 0; }</style>
</head>
<body>
<script type="text/javascript">
<!--

var canvas    = document.createElement('canvas'),
    container = document.createElement('div'),
    context   = canvas.getContext('2d'),
    aspectRatio = 1.25,
    showsec = true,
    fps = 30,
    centerX,
    centerY,
    baseSize,
    fontSize,
    sin30 = 0.5,
    sin60 = 0.86602540378,
    cos30 = sin60,
    cos60 = sin30,
    dialWidth,
    dialHeight,
    dialRadiusShort,
    dialRadiusLong,
    dialPosX0,
    dialPosX1,
    dialPosX2,
    dialPosX3,
    dialPosXs,
    dialPosY0,
    dialPosY1,
    dialPosY2,
    dialPosY3,
    dialPosYs,
    hourHandUpperWidth,
    hourHandLowerWidth,
    hourHandHeight,
    minuteHandUpperWidth,
    minuteHandLowerWidth,
    minuteHandHeight,
    secondHandUpperWidth,
    secondHandLowerWidth,
    secondHandHeight,
    pivotOffset = 1/4;

function resize() {
  if (window.innerWidth > window.innerHeight * aspectRatio) {
    var screenWidth = window.innerHeight * aspectRatio;
    
    canvas.style.width  = screenWidth + 'px';
    canvas.style.height = window.innerHeight + 'px';
    canvas.width  = screenWidth * window.devicePixelRatio;
    canvas.height = window.innerHeight * window.devicePixelRatio;

    container.style.width  = screenWidth + 'px';
    container.style.height = window.innerHeight + 'px';
  } else {
    var screenHeight = window.innerWidth / aspectRatio;
    
    canvas.style.width  = window.innerWidth + 'px';
    canvas.style.height = screenHeight + 'px';
    canvas.width  = window.innerWidth * window.devicePixelRatio;
    canvas.height = screenHeight * window.devicePixelRatio;
    
    container.style.width  = window.innerWidth + 'px';
    container.style.height = screenHeight + 'px';
  }
  
  centerX = canvas.width / 2;
  centerY = canvas.height / 2;
  baseSize = canvas.height / 80;
  
  fontSize = baseSize * 15;
  
  dialWidth       = baseSize;
  dialHeight      = baseSize * 8.5;
  dialRadiusShort = baseSize * 34;
  dialRadiusLong  = baseSize * 37;
  dialPosX0 = -1;
  dialPosX1 = dialRadiusShort * cos60;
  dialPosX2 = dialRadiusLong * cos30;
  dialPosX3 = -1;
  dialPosXs = [
    dialPosX0, +dialPosX1, +dialPosX2, +dialPosX3, +dialPosX2, +dialPosX1,
    dialPosX0, -dialPosX1, -dialPosX2, -dialPosX3, -dialPosX2, -dialPosX1
  ];
  dialPosY0 = -1,
  dialPosY1 = dialRadiusShort * sin60,
  dialPosY2 = dialRadiusLong * sin30,
  dialPosY3 = -1;
  dialPosYs = [
    -dialPosY0, -dialPosY1, -dialPosY2, dialPosY3, +dialPosY2, +dialPosY1,
    +dialPosY0, +dialPosY1, +dialPosY2, dialPosY3, -dialPosY2, -dialPosY1
  ];
  
  secondHandUpperWidth = baseSize * 0.25,
  secondHandLowerWidth = baseSize * 0.25,
  secondHandHeight     = baseSize * 47,
  minuteHandUpperWidth = baseSize * 1.5,
  minuteHandLowerWidth = baseSize * 3,
  minuteHandHeight     = baseSize * 47,
  hourHandUpperWidth   = baseSize * 2,
  hourHandLowerWidth   = baseSize * 4,
  hourHandHeight       = baseSize * 32.5;
}

function initialize() {
  container.style.margin = '0 auto';
  container.style.overflow = 'hidden';
  container.appendChild(canvas);
  document.body.appendChild(container);
  setPropertiesByQueryString();
}

function clamp(input, min, max) {
  return input < min ? min : input > max ? max : input;
}

function setPropertiesByQueryString() {
  var queryStrings = window.location.search.slice(1).split('&');
  for (var i = 0; i < queryStrings.length; i++) {
    var queryString = queryStrings[i].split('=');
    if (queryString[0] == "showsec") {
      showsec = (queryString[1] == '1') ? true : false;
    }
    if (queryString[0] == "fps") {
      fps = clamp(queryString[1], 1, 60);
    }
  }
}

function clearScreen() {
  context.fillStyle = "#ffffff";
  context.fillRect(0, 0, canvas.width, canvas.height);
  context.fillStyle = "#000000";
}

function drawClockNumber(char, posX, posY) {
  context.fillText(char, posX - fontSize/4, posY + fontSize/3);
}

function drawClockNumbers() {
  context.font = 'bold '+ fontSize +'px sans-serif';
  drawClockNumber('3', (centerX + baseSize * 42), (centerY));
  drawClockNumber('6', (centerX), (centerY + baseSize * 31));
  drawClockNumber('9', (centerX - baseSize * 42), (centerY));
  drawClockNumber('1', (centerX - baseSize * 4), (centerY - baseSize * 31));
  drawClockNumber('2', (centerX + baseSize * 2.5), (centerY - baseSize * 31));
}

function toRadians(degrees) { return degrees * Math.PI / 180; }

function drawClockDials() {
  for (var i = 1; i < 12; i++) {
    if (i == 3 || i == 6 || i == 9) { continue; }
    context.save();
    context.translate(centerX, centerY);
    context.translate(dialPosXs[i], dialPosYs[i]);
    context.rotate(toRadians(i * 30));
    context.fillRect(-dialWidth/2, -dialHeight/2, dialWidth, dialHeight);
    context.restore();
  }
}

function drawTrapezoid(upperWidth, lowerWidth, height) {
  context.beginPath();
  context.moveTo(-upperWidth/2, -height/2);
  context.lineTo(+upperWidth/2, -height/2);
  context.lineTo(+lowerWidth/2, +height/2);
  context.lineTo(-lowerWidth/2, +height/2);
  context.closePath();
  context.fill();
}

function drawClockHand(angleInDegrees, upperWidth, lowerWidth, height) {
  context.save();
  context.rotate(toRadians(angleInDegrees));
  context.translate(0, -height * pivotOffset);
  drawTrapezoid(upperWidth, lowerWidth, height);
  context.restore();
}

function drawClockHands() {
  
  // get current time
  var date = new Date();
  var hours = date.getHours();
  var minutes = date.getMinutes();
  var seconds = date.getSeconds();
  
  context.save();
  context.translate(centerX, centerY);
  
  // draw hour hand
  var angleHour = hours%12 * 30 + minutes / 2;
  drawClockHand(angleHour, hourHandUpperWidth, hourHandLowerWidth, hourHandHeight);
  
  // draw minute hand
  var angleMinute = minutes * 6 + seconds / 10;
  drawClockHand(angleMinute, minuteHandUpperWidth, minuteHandLowerWidth, minuteHandHeight);
  
  // draw second hand
  if (showsec) {
    var angleMilliSecconds = (fps > 1) ? date.getMilliseconds() * 6 / 1000 : 0;
    var angleSeconds = seconds * 6 + angleMilliSecconds;
    drawClockHand(angleSeconds, secondHandUpperWidth, secondHandLowerWidth, secondHandHeight);
  }
  
  context.restore();
}

function loop() {

  resize();
  clearScreen();
  
  drawClockDials();
  drawClockNumbers();
  drawClockHands();
  
  var showCenterLineForDebug = false;
  if (showCenterLineForDebug) {
    context.strokeStyle = '#00ffff';
    function drawLine(x0, y0, x1, y1) {
      context.beginPath();
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.stroke();
    }
    drawLine(0, centerY, canvas.width, centerY);
    drawLine(centerX, 0, centerX, canvas.height);
  }
}

initialize();
setInterval(loop, parseInt(1000 / fps));

//-->
</script>
</body>
</html>
